// Code generated by MockGen. DO NOT EDIT.
// Source: screenshot.go
//
// Generated by this command:
//
//	mockgen -source=screenshot.go -destination=./mock/screenshot.go -package=mock_screenshot
//
// Package mock_screenshot is a generated GoMock package.
package mock_screenshot

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockImageGeneratorInterface is a mock of ImageGeneratorInterface interface.
type MockImageGeneratorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockImageGeneratorInterfaceMockRecorder
}

// MockImageGeneratorInterfaceMockRecorder is the mock recorder for MockImageGeneratorInterface.
type MockImageGeneratorInterfaceMockRecorder struct {
	mock *MockImageGeneratorInterface
}

// NewMockImageGeneratorInterface creates a new mock instance.
func NewMockImageGeneratorInterface(ctrl *gomock.Controller) *MockImageGeneratorInterface {
	mock := &MockImageGeneratorInterface{ctrl: ctrl}
	mock.recorder = &MockImageGeneratorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageGeneratorInterface) EXPECT() *MockImageGeneratorInterfaceMockRecorder {
	return m.recorder
}

// Capture mocks base method.
func (m *MockImageGeneratorInterface) Capture() ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capture")
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Capture indicates an expected call of Capture.
func (mr *MockImageGeneratorInterfaceMockRecorder) Capture() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capture", reflect.TypeOf((*MockImageGeneratorInterface)(nil).Capture))
}
